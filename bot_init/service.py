import re
from time import sleep

from django.conf import settings
from telebot import TeleBot

from bot_init.models import Subscriber
from bot_init.schemas import Answer
from bot_init.markup import get_default_keyboard
from game.models import MembersGroup, PointsRecord


def get_primary_key_from_start_message(text: str) -> int:
    return int(text[7:])


def registration_subscriber(chat_id: int, text: str):
    """–õ–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞"""
    try:
        pk = get_primary_key_from_start_message(text)
        members_group = MembersGroup.objects.get(pk=pk)
    except ValueError:
        return Answer("–ü–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã")
    subscriber, created = Subscriber.objects.get_or_create(tg_chat_id=chat_id, members_group=members_group)
    return Answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", keyboard=get_default_keyboard())


def get_tbot_instance():
    return TeleBot(settings.TG_BOT.token)


def update_webhook(host=f'{settings.TG_BOT.webhook_host}/{settings.TG_BOT.token}'):
    """–û–±–Ω–æ–≤–ª—è–µ–º webhook"""
    tbot = get_tbot_instance()
    tbot.remove_webhook()
    sleep(1)
    web = tbot.set_webhook(host)


def get_subscriber_by_chat_id(chat_id: int):
    try:
        subscriber = Subscriber.objects.get(tg_chat_id=chat_id)
        return subscriber
    except Subscriber.DoesNotExist:
        pass  # TODO —á—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ


def write_points(chat_id: int, points_count: int):
    subscriber = get_subscriber_by_chat_id(chat_id)
    PointsRecord.objects.create(subscriber=subscriber, points_count=points_count)


def get_subscriber_point_count(subscriber: Subscriber) -> int:
    points_records = PointsRecord.objects.filter(subscriber=subscriber)
    result = 0
    for elem in points_records:
        result += elem.points_count
    return result


def get_subscriber_statistic_by_chat_id(chat_id: int) -> int:
    subscriber = get_subscriber_by_chat_id(chat_id)
    return get_subscriber_point_count(subscriber)


def get_group_statistic_by_chat_id(chat_id: int) -> int:
    subscriber = get_subscriber_by_chat_id(chat_id)
    group = subscriber.members_group
    group_points = sum([get_subscriber_point_count(subscriber) for subscriber in group.subscribers.all()])
    return group_points


def text_message_service(chat_id: int, text: str):
    if text == 'üìà–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        subscriber_points = get_subscriber_statistic_by_chat_id(chat_id)
        group_points = get_group_statistic_by_chat_id(chat_id)
        text = f'–ë–∞–ª–ª–æ–≤ —É –≥—Ä—É–ø–ø—ã: {group_points}\n–ë–∞–ª–ª–æ–≤ —É –≤–∞—Å: {subscriber_points}'
        return Answer(text, keyboard=get_default_keyboard())
    elif regexp_result := re.search(r'\d+', text):
        if not True: # TODO –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç 20 –¥–æ 24 —á–∞—Å–æ–≤, –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ –¥–µ–Ω—å
            return
        write_points(chat_id, regexp_result.group(0))
        return Answer(f'–ó–∞—Å—á–∏—Ç–∞–Ω–æ {text} –æ—á–∫–æ–≤')
